<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>8-Puzzle</title>
    <style>
        /* Estilos já definidos anteriormente */
        body {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
        }

        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 10px;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
        }

        .tile {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100px;
            height: 100px;
            background-color: #2196f3;
            color: white;
            font-size: 24px;
            cursor: pointer;
            user-select: none;
            box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3);
        }

        .tile.empty {
            background-color: #f0f0f0;
            cursor: default;
            box-shadow: none;
        }

        .board-state {
            margin-top: 20px;
            font-size: 18px;
            font-weight: bold;
            color: #333;
        }

        .inversions, .move-count, .manhattan, .hamming {
            margin-top: 10px;
            font-size: 16px;
            color: #555;
        }

        .shuffle-button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.3);
            transition: background-color 0.3s;
        }

        .shuffle-button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="grid">
            <div class="tile" data-value="1">1</div>
            <div class="tile" data-value="2">2</div>
            <div class="tile" data-value="3">3</div>
            <div class="tile" data-value="4">4</div>
            <div class="tile" data-value="5">5</div>
            <div class="tile" data-value="6">6</div>
            <div class="tile" data-value="7">7</div>
            <div class="tile" data-value="8">8</div>
            <div class="tile empty" data-value="0"></div>
        </div>
    </div>
    <button class="shuffle-button" id="shuffleButton">Sortear Estado Inicial</button>
    <div class="board-state" id="boardState">
        Estado atual: [1, 2, 3, 4, 5, 6, 7, 8, 0]
    </div>
    <div class="inversions" id="inversionsCount">
        Inversões: 0 (Paridade: par)
    </div>
    <div class="move-count" id="moveCount">
        Número de jogadas: 0
    </div>
    <div class="manhattan" id="manhattanDistance">
        Distância Manhattan: 0
    </div>
    <div class="hamming" id="hammingDistance">
        Peças fora do lugar: 0
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const tiles = document.querySelectorAll('.tile');
            const grid = document.querySelector('.grid');
            const boardStateDisplay = document.getElementById('boardState');
            const inversionsDisplay = document.getElementById('inversionsCount');
            const moveCountDisplay = document.getElementById('moveCount');
            const shuffleButton = document.getElementById('shuffleButton');
            const manhattanDisplay = document.getElementById('manhattanDistance');
            const hammingDisplay = document.getElementById('hammingDistance');

            const goalState = [1, 2, 3, 4, 5, 6, 7, 8, 0];
            let moveCount = 0;

            let boardState = Array.from(tiles).map(tile => parseInt(tile.dataset.value));

            function calculateInversions(state) {
                let inversions = 0;
                for (let i = 0; i < state.length - 1; i++) {
                    for (let j = i + 1; j < state.length; j++) {
                        if (state[i] > state[j] && state[i] !== 0 && state[j] !== 0) {
                            inversions++;
                        }
                    }
                }
                return inversions;
            }

            function calculateManhattanDistance(state) {
                let distance = 0;
                const positions = {
                    0: [2, 2], 1: [0, 0], 2: [0, 1], 3: [0, 2],
                    4: [1, 0], 5: [1, 1], 6: [1, 2],
                    7: [2, 0], 8: [2, 1]
                };
                state.forEach((value, index) => {
                    if (value !== 0) {
                        const currentRow = Math.floor(index / 3);
                        const currentCol = index % 3;
                        const [goalRow, goalCol] = positions[value];
                        distance += Math.abs(currentRow - goalRow) + Math.abs(currentCol - goalCol);
                    }
                });
                return distance;
            }

            function calculateHammingDistance(state) {
                let hamming = 0;
                state.forEach((value, index) => {
                    if (value !== 0 && value !== goalState[index]) {
                        hamming++;
                    }
                });
                return hamming;
            }

            function updateDisplay() {
                boardStateDisplay.textContent = `Estado atual: [${boardState.join(', ')}]`;

                const inversions = calculateInversions(boardState);
                const parity = inversions % 2 === 0 ? "par" : "ímpar";
                inversionsDisplay.textContent = `Inversões: ${inversions} (Paridade: ${parity})`;

                const manhattanDistance = calculateManhattanDistance(boardState);
                manhattanDisplay.textContent = `Distância Manhattan: ${manhattanDistance}`;

                const hammingDistance = calculateHammingDistance(boardState);
                hammingDisplay.textContent = `Peças fora do lugar: ${hammingDistance}`;

                moveCountDisplay.textContent = `Número de jogadas: ${moveCount}`;
            }

            function checkGoalState() {
                if (boardState.join(',') === goalState.join(',')) {
                    alert(`Você resolveu o puzzle em ${moveCount} jogadas!`);
                }
            }

            function shuffleBoard() {
                do {
                    boardState = boardState.sort(() => Math.random() - 0.5);
                } while (calculateInversions(boardState) % 2 !== 0);

                moveCount = 0;

                tiles.forEach((tile, index) => {
                    tile.textContent = boardState[index] === 0 ? "" : boardState[index];
                    tile.dataset.value = boardState[index];

                    if (boardState[index] === 0) {
                        tile.classList.add('empty');
                    } else {
                        tile.classList.remove('empty');
                    }
                });

                updateDisplay();
            }

            updateDisplay();

            grid.addEventListener('click', (e) => {
                const tile = e.target;
                if (tile.classList.contains('tile')) {
                    moveTile(tile);
                }
            });

            shuffleButton.addEventListener('click', shuffleBoard);

            function moveTile(tile) {
                const emptyTile = document.querySelector('.tile.empty');
                const tileIndex = Array.from(tiles).indexOf(tile);
                const emptyTileIndex = Array.from(tiles).indexOf(emptyTile);

                const validMoves = {
                    0: [1, 3],
                    1: [0, 2, 4],
                    2: [1, 5],
                    3: [0, 4, 6],
                    4: [1, 3, 5, 7],
                    5: [2, 4, 8],
                    6: [3, 7],
                    7: [4, 6, 8],
                    8: [5, 7]
                };

                if (validMoves[emptyTileIndex].includes(tileIndex)) {
                    // Troca de posição entre a peça clicada e a peça vazia
                    [boardState[tileIndex], boardState[emptyTileIndex]] = [boardState[emptyTileIndex], boardState[tileIndex]];

                    // Atualiza o conteúdo visual
                    tile.textContent = boardState[tileIndex] === 0 ? "" : boardState[tileIndex];
                    emptyTile.textContent = boardState[emptyTileIndex] === 0 ? "" : boardState[emptyTileIndex];

                    // Troca as classes para manter a peça vazia correta
                    tile.classList.add('empty');
                    emptyTile.classList.remove('empty');

                    // Incrementa o contador de jogadas
                    moveCount++;

                    // Atualiza as exibições
                    updateDisplay();

                    // Verifica se o estado meta foi alcançado
                    checkGoalState();
                }
            }
        });
    </script>
</body>
</html>
